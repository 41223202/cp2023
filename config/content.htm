<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite </a></p>
<h1>w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gnuplot_ex1.c</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<h1>w6</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// cc roc_flag.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

    // 繪製紅色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 繪製藍色矩形區域
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

    // 繪製太陽
    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
    float angle = 0;
    int numRays = 12; // 光芒的數量

    gdPoint points[3]; // 三個頂點的陣列

    for (int i = 0; i &lt; numRays; i++) {
        angle = i * (2 * M_PI / numRays);
        float x1 = center_x + cos(angle) * sun_radius;
        float y1 = center_y + sin(angle) * sun_radius;

        // 調整兩個底邊頂點的位置
      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

        // 設定多邊形的三個頂點
        points[0].x = (int)x1;
        points[0].y = (int)y1;
        points[1].x = (int)x2;
        points[1].y = (int)y2;
        points[2].x = (int)x3;
        points[2].y = (int)y3;

        gdImageFilledPolygon(img, points, 3, white);
    }
  //外圈
  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);

    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_roc_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="267" src="/images/roc_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_United_States
// https://www.britannica.com/topic/flag-of-the-United-States-of-America
// 以下為幾乎要繪製完成的美國國旗, 請修改下列原始碼, 令其繪出正確的美國國旗
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 国旗颜色
    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹
    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // 星星大小

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距
    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距
    int star_start_x = (int)(0.125 * height); // 星星的起始X位置
    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        // 计算2、4、6和8排星星的偏移量
        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x + offset_x;

            // 旋转角度（以弧度为单位）
            double rotation_angle = M_PI / 5; // 忘記多少度的旋转

            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white, rotation_angle);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // 用指定的颜色填充星星
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p style="top: 56.6px;">clear</p>
<p style="top: 56.6px;">cd downloads</p>
<p style="top: 56.6px;">cc gd_usa_flag.c -lgd -lm</p>
<p style="top: 56.6px;">./a.out</p>
<p style="top: 56.6px;"><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<p style="top: 56.6px;"><video controls="controls" height="630" width="1008">
<source src="/images/Taiwan.mp4" type="video/mp4"/></video></p><h1>w7</h1>
<p></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_chinese_flag(gdImagePtr img);

int main() {
    int width = 300; // 國旗寬度
    int height = 200; // 國旗高度

    gdImagePtr im = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(im, 0);

    draw_chinese_flag(im);

    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(im, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(im);

    return 0;
}

// 声明 draw_star 函数
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

void draw_chinese_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;

    // 國旗顏色
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星

    // 畫紅色背景
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 設置星星的大小和位置
    int star_size = (int)(0.28 * height);
    int star_x = (int)(0.165 * width);
    int star_y = (int)(0.265 * height);

    // 畫大星星
    draw_star(img, star_x, star_y, star_size, yellow, 11.0);

    // 繪製小星星，位置根據實際國旗比例計算
    double radius = 0.15 * height;
    double angle = 360 / 7 * M_PI / 179.0;
    double rotation = -M_PI / 7.5;
    int cx = (int)(0.32 * width);
    int cy = (int)(0.27 * height);

    for (int i = -1; i &lt; 3; i++) {
        int x = (int)(cx + radius * cos(i * angle + rotation));
        int y = (int)(cy + radius * sin(i * angle + rotation));
        draw_star(img, x, y, 19, yellow, M_PI / 5.0);
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    // 计算星形的五个外点和五个内点
    double outer_radius = size / 2;
    double inner_radius = size / 6;
    double angle = M_PI / 5.0;

    for (int i = 0; i &lt; 10; i++) {
        double radius = (i % 2 == 0) ? outer_radius : inner_radius;
        double theta = rotation_angle + i * angle;
        points[i].x = x + radius * cos(theta);
        points[i].y = y + radius * sin(theta);
    }

    // 使用 gdImageFilledPolygon 绘制星形
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><video controls="controls" height="630" width="1008">
<source src="/images/2.mp4" type="video/mp4"/></video></p>
<p><img alt="" height="267" src="/images/proc_flag.png" width="400"/><br/><br/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);

int main() {
    // 设置国旗的宽和高
    int width = 1200;
    int height = width / 2;

    // 创建图像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    // 绘制英国国旗
    draw_uk_flag(img);

    // 将图像保存到文件
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时发生错误。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}



void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);

    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色

    gdImageFilledRectangle(img, 0, 0, width, height, blue);


  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);

    int x1, y1, x2, y2, x3, y3;

    // 绘制白色斜线
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);

    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);


    // 绘制红色斜线
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);

  int x1, y1, x2, y2, x3, y3;

  // 绘制  斜线
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );


  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);


  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);


  }

    // 绘制白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;

    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);

    // 绘制红色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<p></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );

int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_japan_flag(img);

    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes


    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);


    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/><video controls="controls" height="630" width="1008">
<source src="/images/japan.mp4" type="video/mp4"/></video></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"

int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;

    im = gdImageCreate(WIDTH, HEIGHT);

    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);

    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);

    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);

    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);

  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;     

  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);

  int circleX2 = 515;    // 圓心的 X 座標

 int circleY2 = 337.5;

  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);

  {


  // 起點和終點位置

  int startX = 340;    
  // 線的起點 X 座標

  int startY = 90;   
  // 線的起點 Y 座標

  int endX = 200;     
  // 線的終點 X 座標

  int endY = 260;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 270;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 210;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);

  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置

  int startX = 330;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 190;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }

  {
    // 起點和終點位置

  int startX = 564;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 704;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);

gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);

  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置

  int startX = 330;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 190;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }
  {
    // 起點和終點位置

  int startX = 564;    
  // 線的起點 X 座標

  int startY = 97;   
  // 線的起點 Y 座標

  int endX = 704;     
  // 線的終點 X 座標

  int endY = 267;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);

  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 277;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 217;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);

    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);

  }

    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }</pre>
<p><img alt="" height="267" src="/images/korea_flag.png" width="400"/><br/><br/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/11japan.mp4" type="video/mp4"/></video></p>
<p></p><h1>w11</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

int main() {
    int width = 800;
    int height = 600;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {

fprintf(stderr, "Error opening the output file.\n");

return 1;
    }

    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);

    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);

    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p><img alt="" height="300" src="/images/hellogd.png" width="400"/></p>
<h1>w13</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }

    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // Close the data file
    fclose(outputFile);

    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<h1>w15</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖
    // 由於中央白日圓形的半徑為青天寬度的 1/8
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
    int sun_radius = (int)(width/8);
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
    int white_circle_dia = sun_radius;
    // 中央藍色圓形半徑為中央白日的 1又 2/15
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
    // 根據畫布大小塗上紅色長方形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 先設法以填色畫出六個白色堆疊菱形
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
    float deg = M_PI/180;
    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
    float sr = sun_radius/tan(75*deg);
    int ax, ay, bx, by, dx, dy, ex, ey;
    gdPoint points[4];
    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // AB
    gdImageLine(img, ax, ay, bx, by, color);
    // BE
    gdImageLine(img, bx, by, ex, ey, color);
    // ED
    gdImageLine(img, ex, ey, dx, dy, color);
    // DA
    gdImageLine(img, dx, dy, ax, ay, color);
    */
    ax = center_x;
    ay = center_y - sun_radius;
    printf("%d,%d\n",ax, ay);
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
    for (int i=1;i&lt;=6;i++){
    // A
    points[0].x = ax+sun_radius*sin(30*deg*i);
    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
    printf("A coord: (%d,%d)\n", points[0].x, points[0].y);
    // B
    points[1].x = bx+sr-sr*cos(30*deg*i);
    points[1].y = by-sr*sin(30*deg*i);
    printf("B coord: (%d,%d)\n", points[1].x, points[1].y);
    // E
    points[2].x = ex-sun_radius*sin(30*deg*i);
    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
    printf("E coord: (%d,%d)\n", points[2].x, points[2].y);
    // D
    points[3].x = dx-(sr-sr*cos(30*deg*i));
    points[3].y = dy+sr*sin(30*deg*i);
    printf("D coord: (%d,%d)\n\n", points[2].x, points[2].y);
    // 對菱形區域範圍塗色
    gdImageFilledPolygon(img, points, 4, color);
    // 在菱形區域外圍畫線, 明確界定菱形範圍
    gdImagePolygon(img, points, 4, color);
    }
}</pre>
<p><img alt="" height="267" src="/images/exam_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

#include &lt;gd.h&gt;

#include &lt;math.h&gt;



void draw_roc_flag(gdImagePtr img);

void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);



int main() {

    // width 3: height 2

    int width = 1200;

    // 國旗長寬比為 3:2

    int height = (int)(width*2.0 / 3.0);



    gdImagePtr img = gdImageCreateTrueColor(width, height);

    gdImageAlphaBlending(img, 0);



    draw_roc_flag(img);



    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");

    if (outputFile == NULL) {

        fprintf(stderr, "Error opening the output file.\n");

        return 1;

    }

    gdImagePngEx(img, outputFile, 9);

    fclose(outputFile);

    gdImageDestroy(img);

    return 0;

}



void draw_roc_flag(gdImagePtr img) {

    int width = gdImageSX(img);

    int height = gdImageSY(img);

    int red, white, blue;

    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處

    int center_x = (int)(width/4);

    int center_y = (int)(height/4);

    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖

    // 由於中央白日圓形的半徑為青天寬度的 1/8

    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8

    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8

    int sun_radius = (int)(width/8);

    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑

    int white_circle_dia = sun_radius;

    // 中央藍色圓形半徑為中央白日的 1又 2/15

    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;

    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值

    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色

    white = gdImageColorAllocate(img, 255, 255, 255); // 白色

    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色

    // 根據畫布大小塗上紅色長方形區域

    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色

    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

  {int x1 = 429;

   int y1 = 125;

   int x2 = 279;

   int y2 = 165;



   // 畫一條線連接兩個點

   gdImageLine(img, x1, y1, x2, y2, white);

  }

  {int x1 = 170;

     int y1 = 274;

     int x2 = 279;

     int y2 = 165;



     // 畫一條線連接兩個點

     gdImageLine(img, x1, y1, x2, y2, white);

  }

  {

    int x1 = 170;

     int y1 = 274;

     int x2 = 429;

     int y2 = 125;



     // 畫一條線連接兩個點

     gdImageLine(img, x1, y1, x2, y2, white);

  }

  // 利用一個藍色大圓與白色小圓畫出藍色環狀

  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);

  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);





  // 定義座標結構

  typedef struct {

      double x;

      double y;

  } Point;



  // 計算圓與線的交點

  void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {

      // 直線斜率

      double m = (y2 - y1) / (x2 - x1);



      // 直線方程式中的常數項

      double b = y1 - m * x1;



      // 圓與直線交點的計算

      double A = 1 + pow(m, 2);

      double B = 2 * (m * b - m * k - h);

      double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);



      // 判斷交點個數

    double discriminant = pow(B, 2) - 4 * A * C;

    if (discriminant &gt; 0) {

        double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A);

        double y_intersect1 = m * x_intersect1 + b;

        printf("交點: (%.2f, %.2f)\n", x_intersect1, y_intersect1);



        double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A);

        double y_intersect2 = m * x_intersect2 + b;

        printf("交點: (%.2f, %.2f)\n", x_intersect2, y_intersect2);

    } else if (discriminant == 0) {

        double x_intersect = -B / (2 * A);

        double y_intersect = m * x_intersect + b;

        printf("交點: (%.2f, %.2f)\n", x_intersect, y_intersect);

    } else {

        printf("No points.\n");

    }



  }





      // 圓的參數

      double circle_x = (int)(width/4); // 圓心 x 座標

      double circle_y = (int)(height/4); // 圓心 y 座標

      double radius = white_circle_dia +  white_circle_dia*2/15;   // 圓半徑



      // 兩點座標







  double x3 = 170;

  double y3 = 274;

  double x4 = 279;

  double y4 = 165;



  circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);





  double x5 = 279;

  double y5 = 165;

  double x6 = 429;

  double y6 = 125;



  circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);
}

</pre>
<p><video controls="controls" height="630" width="1008">
<source src="/images/exam.mp4" type="video/mp4"/></video></p>
<h1>w16</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

#define WIDTH 800
#define HEIGHT 600
#define SCALE 100

void drawResistor(gdImagePtr im, int x1, int y, int width, int height) {
    int startX = x1 ;
    int endX = x1 + width ;

    // 第一段直线向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));

    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2 , startX + width / 4 + height / 2 + 4 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 4 * height, y - height / 2, startX + width / 4 + height / 2 + 5 * height, y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

  // 向上45度
    gdImageLine(im, startX + width / 4 + height / 2 + 5 * height, y + height / 2, startX + width / 4 + height / 2 + 5 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));

  gdImageLine(im, startX + width / 4 + height / 2 + 5 * height + height / 2, y, startX + width / 4 + height / 2 + 5 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));


  {
    int startX = 100;
  gdImageColorAllocate(im, 0, 0, 255);


    // 第一段直线向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));

    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上45度
      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));

    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
 }

  {
    int startX = 585;
  gdImageColorAllocate(im, 0, 0, 255);


    // 第一段直线向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));

    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

  // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
        // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上45度
      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));

    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));

    gdImageLine(im, 100, y +20, 700, y +20, gdImageColorAllocate(im, 0, 255, 0));

}
}

int main() {
    gdImagePtr im;
    FILE *outputFile;

    // 创建图像对象
    im = gdImageCreateTrueColor(WIDTH, HEIGHT);
    if (im == NULL) {
        fprintf(stderr, "Error creating GD image.\n");
        return 1;
    }

    outputFile = fopen("1.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    int black, white, red, blue, green;

    black = gdImageColorAllocate(im, 0, 0, 0);
    white = gdImageColorAllocate(im, 255, 255, 255);
    red = gdImageColorAllocate(im, 255, 0, 0);
    blue = gdImageColorAllocate(im, 0, 0, 255);
green = gdImageColorAllocate(im, 0, 255, 0);
    gdImageFilledRectangle(im, 0, 0, WIDTH - 1, HEIGHT - 1, white);

    // 绘制墙面
    gdImageLine(im, SCALE, SCALE, SCALE, HEIGHT - SCALE, black);
    gdImageLine(im, WIDTH - SCALE, SCALE, WIDTH - SCALE, HEIGHT - SCALE, black);

// 绘制彈簧
    drawResistor(im, WIDTH / 3 + SCALE / 2, HEIGHT / 2, SCALE / 2, SCALE / 4);

    // 绘制质量（方形）
    gdImageFilledRectangle(im, WIDTH / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);
    gdImageFilledRectangle(im, WIDTH * 2 / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH * 2 / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);

  gdImageFilledRectangle(im, 100, HEIGHT +300, 700, HEIGHT /2 +49 , black);



    gdImagePng(im, outputFile);
    fclose(outputFile);
    gdImageDestroy(im);

    return 0;
}</pre>
<p><img alt="" height="300" src="/images/w16-1.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    FILE *gnuplotPipe = popen("gnuplot", "w");
    if (gnuplotPipe) {
        fprintf(gnuplotPipe, "set terminal png\n");
        fprintf(gnuplotPipe, "set output 'motion_plot.png'\n");
        fprintf(gnuplotPipe, "set xlabel 'Time'\n");
        fprintf(gnuplotPipe, "set ylabel 'Position / Velocity'\n");
        fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines title 'm1 position', 'motion_data.txt' using 1:3 with lines title 'm2 position', 'motion_data.txt' using 1:4 with lines title 'm1 velocity', 'motion_data.txt' using 1:5 with lines title 'm2 velocity'\n");
        fprintf(gnuplotPipe, "exit\n");
        fflush(gnuplotPipe);
        pclose(gnuplotPipe);
    } else {
        printf("Error opening pipe to Gnuplot.\n");
    }
    return 0;
}</pre>
<p><img alt="" height="300" src="/images/motion_plot.png" width="400"/></p><h1>ANSIC</h1>
<p>1.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() 
{
    // 声明并初始化字符变量
    char char1 = 'X';
    char char2 = 'M';
    char char3 = 'L';

    // 打印原始和反转字符
    printf("The reverse of %c%c%c is %c%c%c\n",
        char1, char2, char3,
        char3, char2, char1);

    return(0);
}</pre>
<p><video controls="controls" height="630" width="1008">
<source src="/images/reverse.mp4" type="video/mp4"/></video></p>
<p>2.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int j, numbers[5], total=0; // 声明循环计数器、一个包含五个数字的数组以及总和变量

    // 提示用户输入五个数字，并将它们存储在数组中
    printf("\n輸入第一個數字："); 
    scanf("%d", &amp;numbers[0]);
    printf("\n輸入第二個數字："); 
    scanf("%d", &amp;numbers[1]);
    printf("\n輸入第三個數字："); 
    scanf("%d", &amp;numbers[2]);
    printf("\n輸入第四個數字："); 
    scanf("%d", &amp;numbers[3]);
    printf("\n輸入第五個數字："); 
    scanf("%d", &amp;numbers[4]);

    // 通过循环遍历这些数字，找到并计算奇数的总和
    for(j = 0; j &lt; 5; j++) {
        if((numbers[j] % 2) != 0) 
        {
            total += numbers[j];
        }   
    }

    // 打印奇數總和
    printf("\n所有奇數的總和：%d", total);
    printf("\n");

    return 0;
}
</pre>
<p><video controls="controls" height="630" width="1008">
<source src="/images/all odd.mp4" type="video/mp4"/></video></p>
<p></p>
<p></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">3.</span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    float x, y, z, P; // 声明變量以存儲三角形的三邊長和周長

    // 提示用戶輸入三個數字，分別存儲在 'x'、'y' 和 'z'
    printf("\n輸入第一個數字："); 
    scanf("%f", &amp;x);
    printf("\n輸入第二個數字：");
    scanf("%f", &amp;y);
    printf("\n輸入第三個數字：");
    scanf("%f", &amp;z);

    if (x &lt; (y + z) &amp;&amp; y &lt; (x + z) &amp;&amp; z &lt; (x + y)) // 檢查這三個數字是否能構成一個三角形
    {  
        P = x + y + z; // 計算周長
        printf("\n周長 = %.1f\n", P); // 輸出周長	 
    }
    else
    {
        printf("無法構成三角形..！"); // 如果無法構成三角形，輸出相應的消息
    }

    return 0;
}

</pre>
<p><video controls="controls" height="630" width="1008">
<source src="/images/triangle.mp4" type="video/mp4"/></video></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">4.</span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    // 宣告變數和指標
    int fno, sno, *ptr, *qtr, sum;

    // 提示用戶輸入第一個數字
    printf("\n\n Pointer : Add two numbers :\n");
    printf("--------------------------------\n");

    printf(" 輸入第一個數字 : ");
    scanf("%d", &amp;fno);

    // 提示用戶輸入第二個數字
    printf(" 輸入第二個數字 : ");
    scanf("%d", &amp;sno);

    // 指向第一個數字的指標
    ptr = &amp;fno;

    // 指向第二個數字的指標
    qtr = &amp;sno;

    // 計算兩數的總和
    sum = *ptr + *qtr;

    // 輸出總和
    printf(" 輸入的兩個數字的總和 : %d\n\n", sum);

    return 0;
}</pre>
<p><img alt="" height="40" src="/images/add.PNG" width="200"/><br/><br/><br/></p>
<p>5.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

// 函數原型
int calculateLength(char*);

void main() 
{
    char str1[25];
    int l;

    printf("\n\n 指針：計算字符串的長度：\n"); 
    printf("---------------------------------------------------\n");

    // 輸入一個字符串
    printf(" 輸入一個字符串：");
    fgets(str1, sizeof str1, stdin);

    // 計算字符串的長度
    l = calculateLength(str1);

    // 輸出字符串的長度
    printf(" 給定字符串 %s 的長度是：%d ", str1, l - 1);
    printf("\n\n");
}

// 函數，用於計算字符串的長度
int calculateLength(char* ch)
{
    int ctr = 0;

    // 通過迭代字符直到遇到空字符
    while (*ch != '\0') 
    {
        ctr++;
        ch++;
    }

    return ctr;
}
</pre>
<p></p>
<p><img alt="" height="38" src="/images/calculate.PNG" width="200"/></p>
<p>6.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false"># include &lt;stdio.h&gt;
# include &lt;string.h&gt;

int main()
{
    int n, x = 0;
    
    printf("\n\n 檢查給定數字是否是醜數:\n");
    printf("----------------------------------------------------\n");
    
    // 輸入一個整數
    printf(" 輸入一個整數: ");
    scanf("%d", &amp;n);

    if (n &lt;= 0) 
    {  
        printf("請輸入正確的數字.");  
    }
    
    while (n != 1) 
    {  
        if (n % 5 == 0) 
        {  
            n /= 5;  
        } 
        else if (n % 3 == 0) 
        {  
            n /= 3;  
        } 
        else if (n % 2 == 0) 
        {  
            n /= 2;  
        } 
        else 
        {  
            printf("它不是一個醜數.\n"); 
            x = 1;  
            break;  
        }  
    } 
    
    if (x == 0) 
    { 
        printf("它是一個醜數.\n");
    }

    return 0; // 返回 0，表示正常結束程序
}
</pre>
<p></p>
<p><img alt="" height="216" src="/images/number.PNG" width="300"/></p>
<p>7.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;  // 包含標準輸入/輸出頭文件。

void main()
{
    int num1, rem1;  // 声明两个整数变量 'num1' 和 'rem1'。

    printf("輸入一個整數: ");  // 提示用戶輸入一個整數。
    scanf("%d", &amp;num1);  // 讀取並將用戶輸入的值存儲在 'num1' 中。
    rem1 = num1 % 2;  // 計算 'num1' 除以 2 的餘數。
    if (rem1 == 0)  // 檢查餘數是否等於 0。
        printf("%d 是一個偶數\n", num1);  // 打印一條消息，指示 'num1' 是一個偶數。
    else
        printf("%d 是一個奇數\n", num1);  // 打印一條消息，指示 'num1' 是一個奇數。
}
</pre>
<p></p>
<p><img alt="" height="59" src="/images/odd.PNG" width="186"/></p>
<p>8.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;  // 包含標準輸入/輸出頭文件。

void main()
{
    int co1, co2;  // 声明两个整数变量 'co1' 和 'co2' 來存儲座標。

    printf("輸入X和Y坐標的值：");  // 提示用戶輸入座標。
    scanf("%d %d", &amp;co1, &amp;co2);  // 讀取並將用戶輸入的值存儲在 'co1' 和 'co2' 中。

    if (co1 &gt; 0 &amp;&amp; co2 &gt; 0)  // 檢查 'co1' 和 'co2' 是否都是正數。
        printf("該座標點（%d,%d）位於第一象限。\n", co1, co2);  // 打印一條消息，指示該座標位於第一象限。
    else if (co1 &lt; 0 &amp;&amp; co2 &gt; 0)  // 檢查 'co1' 是否為負數並且 'co2' 是否為正數。
        printf("該座標點（%d,%d）位於第二象限。\n", co1, co2);  // 打印一條消息，指示該座標位於第二象限。
    else if (co1 &lt; 0 &amp;&amp; co2 &lt; 0)  // 檢查 'co1' 和 'co2' 是否都是負數。
        printf("該座標點（%d, %d）位於第三象限。\n", co1, co2);  // 打印一條消息，指示該座標位於第三象限。
    else if (co1 &gt; 0 &amp;&amp; co2 &lt; 0)  // 檢查 'co1' 是否為正數並且 'co2' 是否為負數。
        printf("該座標點（%d,%d）位於第四象限。\n", co1, co2);  // 打印一條消息，指示該座標位於第四象限。
    else if (co1 == 0 &amp;&amp; co2 == 0)  // 檢查 'co1' 和 'co2' 是否都是零。
        printf("該座標點（%d,%d）位於原點。\n", co1, co2);  // 打印一條消息，指示該座標位於原點。
}
</pre>
<p><img alt="" height="199" src="/images/quadrant.PNG" width="366"/></p>
<p>9.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;    // 包含標準輸入/輸出頭文件。
#include &lt;stdlib.h&gt;   // 包含標準庫頭文件。
#include &lt;time.h&gt;     // 包含時間頭文件，用於生成隨機數。

int main()           // 主函數的開始。
{
    int number, input;   // 声明兩個整數變量 'number' 和 'input'。

    srand(time(NULL));   // 使用當前時間初始化隨機種子。

    number = rand() % 10 + 1;   // 生成一個介於1到10之間的隨機數並將其存儲在 'number' 中。

    do {   // 開始一個 do-while 循環。
        printf("\n猜數字 (1 到 10): ");   // 打印一條消息，提示用戶猜數字。
        scanf("%d", &amp;input);    // 讀取用戶的輸入並將其存儲在 'input' 中。

        if (number &gt; input)   // 如果隨機數大於用戶的輸入。
            printf("數字較大\n");   // 打印一條消息，指示數字較大。

    } while (number != input);   // 只要用戶的輸入不等於隨機數，就繼續循環。

    printf("答對了！\n\n");   // 打印一條消息，指示用戶猜對了。

    return 0;   // 返回 0，表示程序運行成功。
}   // 主函數的結尾。
</pre>
<p><img alt="" height="162" src="/images/random.PNG" width="200"/></p>
<p>10.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;time.h&gt;    // 包含時間頭文件。
#include &lt;stdio.h&gt;   // 包含標準輸入/輸出頭文件。
#include &lt;stdlib.h&gt;  // 包含標準庫頭文件。

int main(void)
{
    time_t cur_time;      // 声明一個 time_t 類型的變量 'cur_time' 用於存儲當前時間。
    char* cur_t_string;   // 声明一個字符指針 'cur_t_string' 用於存儲轉換後的時間字符串。

    cur_time = time(NULL);   // 獲取當前的日期和時間。
    if (cur_time == ((time_t)-1))
    {
        (void) fprintf(stderr, "無法獲取當前日期和時間。\n");
        exit(EXIT_FAILURE);   // 如果獲取失敗，輸出錯誤消息並退出程序。
    }

    cur_t_string = ctime(&amp;cur_time);   // 將時間轉換為本地時間格式的字符串。
    if (cur_t_string == NULL)
    {
        (void) fprintf(stderr, "無法轉換當前日期和時間。\n");
        exit(EXIT_FAILURE);   // 如果轉換失敗，輸出錯誤消息並退出程序。
    }

    (void) printf("\n 當前時間是：%s \n", cur_t_string);   // 打印當前的日期和時間字符串。

    exit(EXIT_SUCCESS);   // 退出程序，表示成功執行。
}
</pre>
<p><img alt="" height="67" src="/images/time.PNG" width="300"/></p>
<p>11.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

void main()
{
    int fno, sno, *ptr1 = &amp;fno, *ptr2 = &amp;sno;

    printf("\n\n 指針：找出兩個數字之間的最大值：\n");
    printf("------------------------------------------------------------\n");

    printf(" 輸入第一個數字：");
    scanf("%d", ptr1);
    printf(" 輸入第二個數字：");
    scanf("%d", ptr2);

    if (*ptr1 &gt; *ptr2)
    {
        printf("\n\n %d 是最大的數字。\n\n", *ptr1);
    }
    else
    {
        printf("\n\n %d 是最大的數字。\n\n", *ptr2);
    }
}
</pre>
<p><img alt="" height="79" src="/images/two.PNG" width="200"/></p>
<p>12.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define __STDC_WANT_LIB_EXT1__ 1
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main(void)
{
    time_t t = time(NULL);  // 獲取當前時間的秒數，存儲在變數 't' 中。

    printf("\n 表達為協調世界時的日曆時間是：");
    printf("\n UTC:   %s", asctime(gmtime(&amp;t)));  // 使用 'gmtime' 將時間轉換為 UTC 時間，然後使用 'asctime' 打印。

    printf(" 本地時間: %s\n", asctime(localtime(&amp;t)));  // 使用 'localtime' 將時間轉換為本地時間，然後使用 'asctime' 打印。

#ifdef __STDC_LIB_EXT1__
    struct tm buf;
    char str[26];

    asctime_s(str, sizeof str, gmtime_s(&amp;t, &amp;buf));  // 安全版本：使用 'gmtime_s' 將時間轉換為 UTC 時間，然後使用 'asctime_s' 打印。
    printf(" UTC:   %s", str);

    asctime_s(str, sizeof str, localtime_s(&amp;t, &amp;buf));  // 安全版本：使用 'localtime_s' 將時間轉換為本地時間，然後使用 'asctime_s' 打印。
    printf(" 本地時間: %s", str);
#endif
}
</pre>
<p><img alt="" height="82" src="/images/universal.PNG" width="400"/></p>
<p>13.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define __STDC_WANT_LIB_EXT1__ 1
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main(void)
{
    time_t t = time(NULL);  // 獲取當前時間的秒數，存儲在變數 't' 中。

    printf("\n 表達為協調世界時的日曆時間是：");
    printf("\n UTC:   %s", asctime(gmtime(&amp;t)));  // 使用 'gmtime' 將時間轉換為 UTC 時間，然後使用 'asctime' 打印。

    printf(" 本地時間: %s\n", asctime(localtime(&amp;t)));  // 使用 'localtime' 將時間轉換為本地時間，然後使用 'asctime' 打印。

#ifdef __STDC_LIB_EXT1__
    struct tm buf;
    char str[26];

    asctime_s(str, sizeof str, gmtime_s(&amp;t, &amp;buf));  // 安全版本：使用 'gmtime_s' 將時間轉換為 UTC 時間，然後使用 'asctime_s' 打印。
    printf(" UTC:   %s", str);

    asctime_s(str, sizeof str, localtime_s(&amp;t, &amp;buf));  // 安全版本：使用 'localtime_s' 將時間轉換為本地時間，然後使用 'asctime_s' 打印。
    printf(" 本地時間: %s", str);
#endif
}
</pre>
<p><img alt="" height="44" src="/images/centugrade.PNG" width="400"/></p>
<p>14.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    float numbers[5]; // 声明一個數組來存儲5個數字
    int j, pctr = 0, nctr = 0; // 声明循环计数器、正數計數和負數計數

    // 提示用戶輸入五個數字，並將它們存儲在數組中
    printf("\n輸入第一個數字："); 
    scanf("%f", &amp;numbers[0]);
    printf("\n輸入第二個數字："); 
    scanf("%f", &amp;numbers[1]);
    printf("\n輸入第三個數字："); 
    scanf("%f", &amp;numbers[2]);
    printf("\n輸入第四個數字："); 
    scanf("%f", &amp;numbers[3]);
    printf("\n輸入第五個數字："); 
    scanf("%f", &amp;numbers[4]);

    for (j = 0; j &lt; 5; j++) {
        if (numbers[j] &gt; 0) // 檢查數字是否為正數
        {
            pctr++; // 增加正數計數
        } else if (numbers[j] &lt; 0) // 檢查數字是否為負數
        {
            nctr++; // 增加負數計數
        }
    }

    // 輸出正數和負數的個數
    printf("\n正數的個數：%d", pctr);
    printf("\n負數的個數：%d", nctr);
    printf("\n");

    return 0;
}
</pre>
<p><video controls="controls" height="630" width="1008">
<source src="//images/positive negative"/></video></p>
<p>15.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void process(int arr[], int size, int (*callback)(int))
{
    for (int i = 0; i &lt; size; i++)
    {
        arr[i] = callback(arr[i]);
    }
}
int square(int n)
{
    return n * n;
}

int main()
{
    int arr[] = {1, 2, 3, 4, 5, 6};
    int size = sizeof(arr) / sizeof(arr[0]);
    printf("Array elements before processing: ");
    for (int i = 0; i &lt; size; i++)
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
    process(arr, size, square);
    printf("Square of the array elements after processing: ");
    for (int i = 0; i &lt; size; i++)
    {
        printf("%d ", arr[i]);
    }
    printf("\n");
    return 0;
}</pre>
<p><img alt="" height="87" src="/images/function.PNG" width="640"/></p>
<p>16.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef int( * compare_func_t)(const void * ,
  const void * );
void sort_array(int * arr, size_t n, compare_func_t compare) {
  qsort(arr, n, sizeof(int), compare);
}
int ascending_order(const void * a,
  const void * b) {
  const int * ia = (const int * ) a;
  const int * ib = (const int * ) b;
  return ( * ia &gt; * ib) - ( * ia &lt; * ib);
}

int descending_order(const void * a,
  const void * b) {
  const int * ia = (const int * ) a;
  const int * ib = (const int * ) b;
  return ( * ib &gt; * ia) - ( * ib &lt; * ia);
}
int main() {
  int arr[] = {
    7,
    2,
    0,
    5,
    8,
    9
  };
  size_t n = sizeof(arr) / sizeof(int);
  printf("Original array: ");
  for (size_t i = 0; i &lt; n; i++) {
    printf("%d ", arr[i]);
  }
  printf("\n");
  sort_array(arr, n, ascending_order);
  printf("\nAscending order: ");
  for (size_t i = 0; i &lt; n; i++) {
    printf("%d ", arr[i]);
  }
  printf("\n");
  sort_array(arr, n, descending_order);
  printf("\nDescending order: ");
  for (size_t i = 0; i &lt; n; i++) {
    printf("%d ", arr[i]);
  }
  printf("\n");
  return 0;
}</pre>
<p><img alt="" height="146" src="/images/an_2.PNG" width="325"/></p>
<p>17.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef int( * operation_func_t)(int, int);
int calculate(int * arr, size_t n, int initial_value, operation_func_t operation) {
  int result = initial_value;
  for (size_t i = 0; i &lt; n; i++) {
    result = operation(result, arr[i]);
  }
  return result;
}

int sum(int a, int b) {
  return a + b;
}

int product(int a, int b) {
  return a * b;
}
int main() {
  int arr[] = {
    10,
    20,
    30,
    40,
    50,
    60
  };
  size_t n = sizeof(arr) / sizeof(int);
  printf("Original array elements: ");
  for (size_t i = 0; i &lt; n; i++) {
    printf("%d ", arr[i]);
  }
  int sum_result = calculate(arr, n, 0, sum);
  printf("\nSum: %d", sum_result);
  int product_result = calculate(arr, n, 1, product);
  printf("\nProduct: %d", product_result);

  return 0;
}</pre>
<p><img alt="" height="79" src="/images/sum.PNG" width="445"/></p>
<p>18.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

#include &lt;ctype.h&gt;


void modify_string(char * str, int( * modifier)(int)) {
  while ( * str != '\0') {
    * str = modifier( * str);
    str++;
  }
}

int main() {
  char str[100];
  printf("Input a string: ");
  fgets(str, sizeof(str), stdin);

  printf("Select an option:\n");
  printf("1. Convert to uppercase\n");
  printf("2. Convert to lowercase\n");
  int option;
  scanf("%d", &amp; option);

  switch (option) {
  case 1:
    modify_string(str, toupper);
    printf("Uppercase string: %s", str);
    break;
  case 2:
    modify_string(str, tolower);
    printf("Lowercase string: %s", str);
    break;
  default:
    printf("Invalid option");
    break;
  }

  return 0;
}

</pre>
<p><img alt="" height="346" src="/images/an_4.PNG" width="688"/></p>
<p>19.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

#include &lt;stdlib.h&gt;
 // Function to calculate the average of an array
double calculate_average(int arr[], int n) {
  int sum = 0;
  for (int i = 0; i &lt; n; i++) {
    sum += arr[i];
  }
  return (double) sum / n;
}
// Comparison function for sorting the array
int compare_ints(const void * a,
  const void * b) {
  int int_a = * ((int * ) a);
  int int_b = * ((int * ) b);
  return int_a - int_b;
}

// Function to calculate the median of an array
double calculate_median(int arr[], int n) {
  // Sort the array in ascending order
  qsort(arr, n, sizeof(int), compare_ints);

  // Calculate the median
  double median;
  if (n % 2 == 0) {
    median = (double)(arr[n / 2] + arr[n / 2 - 1]) / 2;
  } else {
    median = arr[n / 2];
  }
  return median;
}

// Function to calculate the average or median of an array
double calculate(int arr[], int n, double( * operation)(int arr[], int n)) {
  return operation(arr, n);
}
int main() {
  int arr[11] = {
    2,
    5,
    4,
    7,
    1,
    8,
    4,
    6,
    5,
    9,
    10
  };
  int n = sizeof(arr) / sizeof(arr[0]);
  printf("Original array elements: ");
  for (size_t i = 0; i &lt; n; i++) {
    printf("%d ", arr[i]);
  }
  printf("\n");
  printf("\nSelect an option:\n");
  printf("1. Calculate average of the said array elements:\n");
  printf("2. Calculate median of the said array elements:\n");
  int option;
  scanf("%d", &amp; option);
  double result;
  switch (option) {
  case 1:
    result = calculate(arr, n, calculate_average);
    printf("Average: %f", result);
    break;
  case 2:
    result = calculate(arr, n, calculate_median);
    printf("Median: %f", result);
    break;
  default:
    printf("Invalid option");
    break;
  }

  return 0;
}
</pre>
<p></p>
<p><img alt="" height="297" src="/images/an_5.PNG" width="687"/></p>
<p>20.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"

int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;

    im = gdImageCreate(WIDTH, HEIGHT);

    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);

    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);

    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);

    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);

  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;     

  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);

  int circleX2 = 515;    // 圓心的 X 座標

 int circleY2 = 337.5;

  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);

  {


  // 起點和終點位置

  int startX = 340;    
  // 線的起點 X 座標

  int startY = 90;   
  // 線的起點 Y 座標

  int endX = 200;     
  // 線的終點 X 座標

  int endY = 260;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 270;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 210;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);

  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置

  int startX = 330;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 190;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }

  {
    // 起點和終點位置

  int startX = 564;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 704;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);

gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);

  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置

  int startX = 330;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 190;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }
  {
    // 起點和終點位置

  int startX = 564;    
  // 線的起點 X 座標

  int startY = 97;   
  // 線的起點 Y 座標

  int endX = 704;     
  // 線的終點 X 座標

  int endY = 267;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);

  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 277;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 217;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);

    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);

  }

    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }</pre>
<p><img alt="" height="86" src="/images/an_6.PNG" width="345"/></p><h1>c_ex</h1>
<p>1.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
Logical NOT.
==================== */
#include &lt;stdio.h&gt;
void main()
{
int a;
a = 3;
printf("%d\n", !a );
a = 0;
printf("%d\n", !a );
}</pre>
<p><img alt="" height="88" src="/images/1.PNG" width="200"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c5.mp4" type="video/mp4"/></video></p>
<p>2.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
基本運算範例.
==================== */
#include&lt;stdio.h&gt;
int main()
{
int a,b;
a = 10; b = 3;
printf( "%d \n", a * b );
printf( "%d \n", a / b );
printf( "%d \n", a + b );
printf( "%d \n", a - b );
printf( "%d \n", a % b );
return 0;
}</pre>
<p><img alt="" height="166" src="/images/1.png" width="250"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c1.mp4" type="video/mp4"/></video><br/><br/></p>
<p>3.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
關係運算元的範例.
==================== */
#include &lt;stdio.h&gt;
int main()
{
int a = 10, b = 5;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
printf( "\n" );
b = 10;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
return 0;
}</pre>
<p><img alt="" height="365" src="/images/2.png" width="250"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c3.mp4" type="video/mp4"/></video></p>
<p></p>
<p>4.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
位元運算元的範例.
==================== */
#include&lt;stdio.h&gt;
void main()
{
int a,b;
a = 15;
b = 1;
printf("%d \n", a | b ); /* a OR b */
printf("%d \n", a &amp; b ); /* a AND b */
printf("%d \n", a ^ b ); /* a XOR b */
printf("%d \n", a &lt;&lt; 1 ); /* a 位元左移 1 位 */
printf("%d \n", a &gt;&gt; 1 ); /* a 位元右移一位 */
printf("%d \n", ~a ); /* A 的補數運算 */
}</pre>
<p><img alt="" height="192" src="/images/3.png" width="265"/><br/><br/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c4.mp4" type="video/mp4"/></video></p>
<p>5.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
sizeof 的範例.
==================== */
#include &lt;stdio.h&gt;
void main()
{
char a;
printf( " The size of int is %d \n", sizeof(int) );
printf( " The size of char a is %d \n", sizeof(a) );
}</pre>
<p><img alt="" height="382" src="/images/6.PNG" width="700"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c6.mp4" type="video/mp4"/></video></p>
<p></p>
<p>6.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 Program 5 - for
 ==================== */
#include &lt;stdio.h&gt;
void main()
{
int i, j;
i = 0; j = 10; /* 迴圈外先設定初值 */
for ( ; i &lt; 6; )
{
printf( "i = %d, ", i );
printf( "j = %d \n", j );
i++;
j++;
}
}
</pre>
<p><img alt="" height="209" src="/images/5.png" width="265"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c2.mp4" type="video/mp4"/></video></p>
<p>7.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
switch - case 的範例 1.
==================== */
#include &lt;stdio.h&gt;
void main()
{
char c ;
printf( "Input a char:" );
scanf( "%c", &amp;c );
switch( c )
{
case 'a':
printf(" you pressed a ");
break;
case 'b':
printf(" you pressed b ");
break;
case 'c':
printf(" you pressed c ");
break;
default:
printf(" not a, b, c ");
break;
}
}</pre>
<p><img alt="" height="185" src="/images/7.PNG" width="700"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c7.mp4" type="video/mp4"/></video></p>
<p>8.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
Program "continue"
==================== */
#include &lt;stdio.h&gt;
void main()
{
int i;
for( i = 0; i &lt; 10; i++ )
{
if( (i != 5) || (i != 6) || (i != 8) )
{
continue; /* 忽略以後的 program, 回到 for. */
}
printf( "i = %d\n ", i );
}
}</pre>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c8.mp4" type="video/mp4"/></video></p>
<p>9.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int x, y;

    for (x = 1; x &lt;= 9; x++)
    {
        for (y = 1; y &lt;= 9; y++)
        {
            printf("%d ", x * y);
        }
        printf("\n");
    }

    return 0;
}</pre>
<p><img alt="" height="231" src="/images/9.PNG" width="275"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c9.mp4" type="video/mp4"/></video></p>
<p></p>
<p>10.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    int i, j;
    i = 0;
    j = 10; /* 在迴圈外先設定初值 */

    // 使用 while 迴圈，當 i 小於 6 時執行迴圈內部的程式碼
    while (i &lt; 6)
    {
        printf("i = %d, ", i);
        printf("j = %d \n", j);

        // i 和 j 分別遞增
        i++;
        j++;
    }
}</pre>
<p></p>
<p><img alt="" height="161" src="/images/10.PNG" width="190"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c10.mp4" type="video/mp4"/></video></p>
<p>11.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    int i, j;
    i = 0;
    j = 10; /* 在迴圈外先設定初值 */

    // 使用 do-while 迴圈，先執行一次循環內的程式碼
    do
    {
        printf("i = %d, ", i);
        printf("j = %d \n", j);

        // i 和 j 分別遞增
        i++;
        j++;
    } while (i &lt; 6); /* 檢查條件的地方 */
}</pre>
<p><img alt="" height="166" src="/images/11.PNG" width="194"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c11.mp4" type="video/mp4"/></video></p>
<p>12.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int grade[5]; /* 大小為 5 的陣列 */
    int i;

    grade[0] = 75; /* 第一個元素 */
    grade[1] = 80; /* 第二個元素 */
    grade[2] = 85; /* 第三個元素 */
    grade[3] = 70; /* 第四個元素 */
    grade[4] = 90; /* 第五個元素 */

    // 使用迴圈輸出陣列的元素
    for (i = 0; i &lt; 5; i++)
    {
        printf("Number %d = %d\n", i, grade[i]);
    }

    return 0;
}</pre>
<p></p>
<p><img alt="" height="146" src="/images/12.PNG" width="184"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c12.mp4" type="video/mp4"/></video></p>
<p>13.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int array[3][3];
    int x, y;

    // 將數值分配給二維陣列中的每個元素
    array[0][0] = 1;
    array[0][1] = 2;
    array[0][2] = 3;
    array[1][0] = 4;
    array[1][1] = 5;
    array[1][2] = 6;
    array[2][0] = 7;
    array[2][1] = 8;
    array[2][2] = 9;

    // 使用巢狀迴圈遍歷二維陣列，並輸出每個元素的值
    for (x = 0; x &lt; 3; x++)
    {
        for (y = 0; y &lt; 3; y++)
        {
            printf("%d,", array[x][y]);
        }
    }

    return 0;
}</pre>
<p><img alt="" height="80" src="/images/13.PNG" width="300"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c13.mp4" type="video/mp4"/></video></p>
<p>14.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    char *s_pointer = "Hello";
    char ch1, ch2;

    ch1 = *s_pointer;
    ch2 = s_pointer[0];

    printf("%c, %c", ch1, ch2);

    return 0;
}
</pre>
<p><img alt="" height="70" src="/images/14.PNG" width="200"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c14.mp4" type="video/mp4"/></video></p>
<p>15.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    char *str = "Eric";

    // 透過指標運算存取字串中的各個字元並輸出
    printf("%c", *(str + 0)); /* 也可寫 printf("%c", str[0]); */
    printf("%c", *(str + 1)); /* 也可寫 printf("%c", str[1]); */
    printf("%c", *(str + 2)); /* 也可寫 printf("%c", str[2]); */
    printf("%c", *(str + 3)); /* 也可寫 printf("%c", str[3]); */
}</pre>
<p><img alt="" height="67" src="/images/15.PNG" width="230"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c15.mp4" type="video/mp4"/></video></p>
<p>16.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int *pointer_a, a;

    // 將指標 pointer_a 指向變數 a 的位址
    pointer_a = &amp;a;

    // 將變數 a 賦值為 10
    a = 10;

    // 輸出變數 a 的值和指標 pointer_a 所指向的值
    printf("%d, %d", a, *pointer_a);

    return 0;
}</pre>
<p><img alt="" height="75" src="/images/16.PNG" width="191"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c16.mp4" type="video/mp4"/></video></p>
<p>17.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

/* 定義一個結構 Mouse */
struct Mouse
{
    int xPos, yPos;
    char Name[10];
};

/* 主函數 */
int main()
{
    /* 創建一個 Mouse 結構的實例 myMouse */
    struct Mouse myMouse;

    /* 給結構成員賦值 */
    myMouse.xPos = 10;
    myMouse.yPos = 20;
    strcpy(myMouse.Name, "Micky");

    /* 輸出結構成員的值 */
    printf("Name: %s, X: %d, Y: %d", myMouse.Name, myMouse.xPos, myMouse.yPos);

    return 0;
}
</pre>
<p><img alt="" height="78" src="/images/17.PNG" width="386"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c17.mp4" type="video/mp4"/></video></p>
<p>18.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">include &lt;stdio.h&gt;

/* 定義一個共用體 Record1 */
union Record1
{
    int xPos, yPos;
    char ch;
};

/* 主函數 */
int main()
{
    /* 創建一個 Record1 共用體的實例 R1 */
    union Record1 R1;

    /* 將 xPos 成員賦值為 66 */
    R1.xPos = 66;

    /* 由於共用體的所有成員共享同一塊記憶體，因此 yPos 和 ch 也會被賦值為 66 */
    printf("xPos=%d, yPos=%d, ch=%c", R1.xPos, R1.yPos, R1.ch);

    return 0;
}</pre>
<p><img alt="" height="73" src="/images/18.PNG" width="350"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c18.mp4" type="video/mp4"/></video></p>
<p>19.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

/* 定義一個函數 Hello，該函數打印 "Hello" */
void Hello(void)
{
    printf(" Hello ");
}

/* 主函數 */
int main()
{
    void (*func)(void); /* 宣告一個函數指標 */

    func = Hello; /* 將 Hello 函數的位址指派給 func */

    func(); /* 使用函數指標呼叫 Hello 函數 */

    return 0;
}
</pre>
<p><img alt="" height="75" src="/images/19.PNG" width="214"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c19.mp4" type="video/mp4"/></video></p>
<p>20.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;

#define ONE 1
#define TWO 2
#define HELLO "hello"

int main()
{
    printf("%d, %d, %s", ONE, TWO, HELLO);
    return 0;
}</pre>
<p><img alt="" height="63" src="/images/20.PNG" width="237"/></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/c20.mp4" type="video/mp4"/></video></p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>